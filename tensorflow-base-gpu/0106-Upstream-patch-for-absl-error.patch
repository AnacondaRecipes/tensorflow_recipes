From 42cf62befe5bb5b011499ad1357c38ae44c62c9b Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Wed, 11 Nov 2020 06:36:34 +0000
Subject: [PATCH] Absl error

---
 .../com_google_absl_fix_mac_and_nvcc_build.patch   | 45 +++++++++++++---------
 1 file changed, 27 insertions(+), 18 deletions(-)

diff --git a/third_party/com_google_absl_fix_mac_and_nvcc_build.patch b/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
index 6301119..9a7bd8b 100644
--- a/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
+++ b/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
@@ -1,7 +1,6 @@
-diff --git a/absl/container/internal/compressed_tuple.h b/absl/container/internal/compressed_tuple.h
-index 4bfe92f..01db713 100644
---- a/absl/container/internal/compressed_tuple.h
-+++ b/absl/container/internal/compressed_tuple.h
+diff -Naur absl_cpp_org/absl/container/internal/compressed_tuple.h absl_cpp_mod/absl/container/internal/compressed_tuple.h
+--- absl_cpp_org/absl/container/internal/compressed_tuple.h	2020-03-04 20:57:37.000000000 +0000
++++ absl_cpp_mod/absl/container/internal/compressed_tuple.h	2020-11-11 06:33:08.541531240 +0000
 @@ -32,7 +32,6 @@
  #ifndef ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_
  #define ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_
@@ -10,7 +9,7 @@ index 4bfe92f..01db713 100644
  #include <tuple>
  #include <type_traits>
  #include <utility>
-@@ -77,110 +76,61 @@ constexpr bool IsFinal() {
+@@ -77,110 +76,61 @@
  #endif
  }
  
@@ -139,7 +138,7 @@ index 4bfe92f..01db713 100644
  //
  // To access the members, use member .get<N>() function.
  //
-@@ -196,58 +146,36 @@ using TupleMoveConstructible = typename std::conditional<
+@@ -196,58 +146,36 @@
  template <typename... Ts>
  class ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC CompressedTuple
      : private internal_compressed_tuple::CompressedTupleImpl<
@@ -207,11 +206,10 @@ index 4bfe92f..01db713 100644
    }
  };
  
-diff --git a/absl/strings/string_view.h b/absl/strings/string_view.h
-index 1861ea6..c7a916b 100644
---- a/absl/strings/string_view.h
-+++ b/absl/strings/string_view.h
-@@ -283,7 +283,14 @@ class string_view {
+diff -Naur absl_cpp_org/absl/strings/string_view.h absl_cpp_mod/absl/strings/string_view.h
+--- absl_cpp_org/absl/strings/string_view.h	2020-03-04 20:57:37.000000000 +0000
++++ absl_cpp_mod/absl/strings/string_view.h	2020-11-11 06:33:08.542531246 +0000
+@@ -283,7 +283,14 @@
    // Returns the ith element of the `string_view` using the array operator.
    // Note that this operator does not perform any bounds checking.
    constexpr const_reference operator[](size_type i) const {
@@ -226,7 +224,7 @@ index 1861ea6..c7a916b 100644
    }
  
    // string_view::at()
-@@ -292,25 +299,46 @@ class string_view {
+@@ -292,25 +299,46 @@
    // and an exception of type `std::out_of_range` will be thrown on invalid
    // access.
    constexpr const_reference at(size_type i) const {
@@ -273,7 +271,7 @@ index 1861ea6..c7a916b 100644
    }
  
    // string_view::data()
-@@ -519,7 +547,14 @@ class string_view {
+@@ -519,7 +547,14 @@
        (std::numeric_limits<difference_type>::max)();
  
    static constexpr size_type CheckLengthInternal(size_type len) {
@@ -288,11 +286,10 @@ index 1861ea6..c7a916b 100644
    }
  
    static constexpr size_type StrlenInternal(const char* str) {
-diff --git a/absl/time/internal/cctz/BUILD.bazel b/absl/time/internal/cctz/BUILD.bazel
-index 7a53c81..159b0f0 100644
---- a/absl/time/internal/cctz/BUILD.bazel
-+++ b/absl/time/internal/cctz/BUILD.bazel
-@@ -74,15 +74,6 @@ cc_library(
+diff -Naur absl_cpp_org/absl/time/internal/cctz/BUILD.bazel absl_cpp_mod/absl/time/internal/cctz/BUILD.bazel
+--- absl_cpp_org/absl/time/internal/cctz/BUILD.bazel	2020-03-04 20:57:37.000000000 +0000
++++ absl_cpp_mod/absl/time/internal/cctz/BUILD.bazel	2020-11-11 06:33:08.542531246 +0000
+@@ -74,15 +74,6 @@
          "include/cctz/time_zone.h",
          "include/cctz/zone_info_source.h",
      ],
@@ -308,3 +305,15 @@ index 7a53c81..159b0f0 100644
      visibility = ["//visibility:public"],
      deps = [
          ":civil_time",
+diff -Naur absl_cpp_org/absl/time/internal/cctz/include/cctz/civil_time_detail.h absl_cpp_mod/absl/time/internal/cctz/include/cctz/civil_time_detail.h
+--- absl_cpp_org/absl/time/internal/cctz/include/cctz/civil_time_detail.h	2020-03-04 20:57:37.000000000 +0000
++++ absl_cpp_mod/absl/time/internal/cctz/include/cctz/civil_time_detail.h	2020-11-11 06:34:42.238047397 +0000
+@@ -23,7 +23,7 @@
+ #include "absl/base/config.h"
+ 
+ // Disable constexpr support unless we are in C++14 mode.
+-#if __cpp_constexpr >= 201304 || (defined(_MSC_VER) && _MSC_VER >= 1910)
++#if (!defined(NO_CONSTEXPR_FOR_YOU) && __cpp_constexpr >= 201304) || (defined(_MSC_VER) && _MSC_VER >= 1910)
+ #define CONSTEXPR_D constexpr  // data
+ #define CONSTEXPR_F constexpr  // function
+ #define CONSTEXPR_M constexpr  // member
-- 
1.8.3.1

